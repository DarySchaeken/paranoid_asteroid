Feb 22 2013		Start 5:45pm
Place: Trottier 5th floor
Minute Taker: Yi Qing Xiao
Meeting Manager:  Payom Meshgin

Problems Encountered:
- Limit amount of extra features
- How many loads?  Make game save only when exiting?
- Game level progressing through clearing games.

- Who will do menu?
- Elements in main menu: game start, high scores, and what else?
- Switch from Visio to Argo
- Single threaded vs multi-thread... 
- Game and Game Field classes on seperate thread?

- All written material needs to be related to SRS doc.
- Adding or deleting items on requirements.

Allocated Tasks

Payom: Menu with Jad and Daniel. How does it work?

Payom: basic introduction, formatting

Alex B: Game design with Coco and Payom.

Yi Qing: 3.2.4 Analysis 
		Start a brouillon of the SAD document.
		
		
		
		

		
Uncut notes taken during meeting:

Feb 22 2013
Start time: 5:45pm
Members present: Payom, Yi Qing, Jad, Alex (not C)
Daniel shamelessly "did not know" there was a meeting.
Alex C already had a meeting with Payom and Alex during noon time.

Talk about phase 2 deliverables.

The part about the main game classes were already discussed during noon meeting.
The UML class diagram has already been made.

The sound generation will only happen when:
- Click of button,
- Death (collision)
- Hyper Drive
- Alien appearance

Lets NOT add extra sound like "GAME START!!"

Competitive:
In case of two players, 
we can either start a game afresh, or we load a previous sessions.
So we need have record of a game when one player dies with list of objects in the game
at that moment, and load all these when its this player's turn to play again.

The save files will be save files.  Limited to how many loads?
Lets make the game as save ONLY when exit, to prevent people abusing the save ability.

The game level will be decided by the game class: each time a game field terminates,
the game class generates another game field, with a different difficulty setting. 

We should give more information to each teammember more spefici inofrmations
about the part sthey are doing.

someone has to do the menu. (overall wrapping objects of the game.)
Dealing with corruption?
File writing.

We need to define relation between start game button to the actual game.
It needs to also load from High_Score, Options, Key Config, Load Game file to 
the game object.
The game expect something, and just send the information to it.
For each object, add as many parameter as we want.

Lets switch vision to ArgoUML because Visio lacks many features like warning about
faults in your design.
We will only use visio once the full UML is done.

UML is best since it is what the client uses.

We need to be very specific about the data types for the variables



Alex will transfer the Visio UML to ArgoUML.

Jad will write about the all about the menu.
Must be precise about the data types, the type of information passed between the objects.
Each method has these attributes, these variables with these data types.

We will start by not taking too much care about who will handle the outputs;
we will link everything together afterward.  Do not assume what is the present 

With all that we decided, are we going SINGLE THREADED??
Every entities = one thread? maybe not (crazy critical sect handling.)
The "Game" and "Game Field" classes on seperate threads?


Everything you write must be referenced to the requirements (SRS doc.)
Any time a class or method, describe what requirements it handles
ALL FUNCTION REQUIREMENTS need at least one method or class that handles it.
And you must describe that.

If you feel something coould be added to the requirements, DO IT.
Teacher expects this, so you should not feel hesitant due to more workload D:<

So for load game: add time and date? Well, at least the present stats like life
and level.

Hit boxes are all rectangular. (even asteroids)
Alex C knows a lot about Java swing, and can teach the rest of us.

Something can happen to a layer not shown on the menu, only that it isnt really 
displayed. We can also have layer on layer, not completely blocking the lower one.

Payom: Menu with Jad and Daniel. How does it work?

	Payom: basic introduction, formatting
	
	Jad prefers: 


	There is the basic menu
	Different buttons (start game, load game, options, credits)
	Each button has diffrent behavior.
	Associate somekind of label to each button to allows user to know in advance 
		where does this button leads to.
	
	Ex) If you have a behavior for start game, it should leads to a new menu of type
	start game. This menu should have all the options related to start game with
	different behaviors.  (Like 1 player game)
	If we have a single player game, we send a signal signaling single play.
	
	The game itself will have to send one way or another the information to start
	the game.
	
	The keys are mapped.  On click of an option, feed a variable to the menu.
	When you click on this option, your menu is gonna handle that variable.
	Lets say single player click: menu do a check on the variables, start game,
	close menu
	
	NOTE: THE ABOVE IS A POSSIBLE IMPLEMENTATION METHOD.  This is not yet final
	
Alex: Game design with Coco and Payom.

Yi Qing: 3.2.4 Analysis 
		Start a brouillon of the SAD document.

End at 7:13PM